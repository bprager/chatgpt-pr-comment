name: Process Pull Request

on:
  pull_request:
    types:
      - opened
      - synchronize

jobs:
  analyze_files:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Process Files
        id: process_files
        run: |
          #!/bin/bash
          set -x

          # Get the pull request information
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          PR_BASE_BRANCH=$(jq --raw-output .pull_request.base.ref "$GITHUB_EVENT_PATH")

          # Fetch the base branch
          git fetch origin $PR_BASE_BRANCH:$PR_BASE_BRANCH

          # Get the files changed in the pull request
          CHANGED_FILES=$(git diff --name-only $PR_BASE_BRANCH)

          # Prepare an array to store file paths
          FILES=()

          # Process each changed file
          for FILE in $CHANGED_FILES; do
          if [[ -f $FILE ]]; then
              if [[ $(git log --follow --format=format: -- "$FILE" | wc -l) -gt 0 ]]; then
              # File was changed, get old content and diff
              OLD_CONTENT=$(git show $PR_BASE_BRANCH:"$FILE")
              DIFF=$(git diff $PR_BASE_BRANCH "$FILE")
              FILES+=("{\"file\": \"$FILE\", \"content\": \"$OLD_CONTENT\", \"diff\": \"$DIFF\"}")
              else
              # File was added, get file name and content
              CONTENT=$(cat "$FILE")
              echo "+++test"
              echo "file: $FILE"
              echo "content: $CONTENT"
              FILES+=("{\"file\": \"$FILE\", \"content\": \"$CONTENT\"}")
              fi
          fi
          done

          echo "name=$(echo ${FILES[*]})" >> $GITHUB_OUTPUT

      - name: Run Python Script
        run: |
          python analyze.py "${{ steps.process_files.outputs.files }}"
