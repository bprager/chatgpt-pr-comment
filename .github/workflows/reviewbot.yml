name: PR Code Review Bot Pipeline

permissions:
  issues: write

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  diff-check:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      issues: write
    steps:
      - name: Checkout Base
        uses: actions/checkout@v3
        with:
          ref: ${{ github.base_ref }}
          path: base

      - name: Checkout Head
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          path: head

      - name: Get PR Diff
        id: diff
        run: |
          cd base
          git fetch origin ${{ github.head_ref }}
          FILES=$(git diff --name-only ${{ github.base_ref }} FETCH_HEAD)
          echo "::set-output name=files::$FILES"

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Python dependencies
        uses: py-actions/py-dependency-install@v4
        with:
          path: head/requirements.txt
          update-pip: "false"
          update-setuptools: "false"
          update-wheel: "false"

      - name: Process Files and Comment
        id: chatgpt
        uses: actions/github-script@v6
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const languages = { 'py': 'Python', 'java': 'Java', 'js': 'JavaScript', 'cpp': 'C++' };
            const fs = require('fs');
            const { execFileSync } = require('child_process');
            const files = '${{ steps.diff.outputs.files }}'.split('\n');
            const comments = [];

            const { numberChanged, repo: { owner, repo } } = context.issue;

            for (const file of files) {
                const headFilePath = `head/${file}`;
                const baseFilePath = `base/${file}`;
                const fileExistsInHead = fs.existsSync(headFilePath);
                const fileModified = fs.existsSync(baseFilePath);

                if (fileExistsInHead) {
                    console.log(`+++ processing file ${file}.`);

                    const fileExtension = file.split('.').pop();
                    if (languages.hasOwnProperty(fileExtension)) {
                        const language = languages[fileExtension];
                        const headContent = fs.readFileSync(headFilePath, 'utf8');
                        let result = "";

                        if (fileModified) {
                            const baseContent = fs.existsSync(baseFilePath) ? fs.readFileSync(baseFilePath, 'utf8') : '';

                            try {
                                const diff = execFileSync('diff', ['-u', baseFilePath, headFilePath], { encoding: 'utf8' });
                                result = execFileSync('python3', ['head/chatgpt_agent.py', 'MODIFIED', baseContent, diff, language], {
                                    encoding: 'utf8',
                                    env: {
                                        OPENAI_API_KEY: process.env.OPENAI_API_KEY
                                    }
                                });
                            } catch (err) {
                                console.error(`Error: ${err}`);
                            }
                        } else {
                            try {
                                result = execFileSync('python3', ['head/chatgpt_agent.py', 'ADDED', headContent, '', language], {
                                    encoding: 'utf8',
                                    env: {
                                        OPENAI_API_KEY: process.env.OPENAI_API_KEY
                                    }
                                });
                            } catch (err) {
                                console.error(`Error: ${err}`);
                            }
                        }

                        console.log(`+++ result: ${result}`);
                        console.log(`*** comments for ${file} created.`);

                        comments.push(`ChatGPT code comment on file: ${file}:\n\n${result}`);
                    }
                } else {
                    console.log(`*** no comments for ${file} created.`);
                }
            }

            await github.rest.issues.createComment({
                issue_number: numberChanged,
                owner,
                repo,
                body: comments.join('\n')
            });
